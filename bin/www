#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('BookAddict');
var http = require('http');
var models = require("../models");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
/**
 * Create HTTP server.
 */

var server = http.createServer(app);
// Sync ORM models
models.sequelize.sync({force: true }).then(function () {

var users = models.User.create(
  {
  username: "admin", 
  email: "admin@admin.admin", 
  password: "admin" 
  },
  {
  username: "gcooper0",
  email: "pday0@utexas.edu",
  password: "NkBqip8A"
}, {
  username: "jhamilton1",
  email: "lmurphy1@ovh.net",
  password: "fvbg6slGRZX"
}, {
  username: "ameyer2",
  email: "jedwards2@taobao.com",
  password: "MYbUmgsDUz"
}, {
  username: "hmontgomery3",
  email: "gbell3@spiegel.de",
  password: "d6H01FvYpBqJ"
}, {
  username: "gmitchell4",
  email: "lking4@livejournal.com",
  password: "Cdmwkj2Ve"
}, {
  username: "ncruz5",
  email: "sgomez5@1688.com",
  password: "TS8WcgDU91J7"
}, {
  username: "rpierce6",
  email: "aray6@de.vu",
  password: "QyPvtUf2h2n"
}, {
  username: "jdiaz7",
  email: "bperez7@de.vu",
  password: "v2NAZ9ZUaN"
}, {
  username: "malvarez8",
  email: "sperkins8@canalblog.com",
  password: "cqnkYJLS"
}, {
  username: "kgreene9",
  email: "jcunningham9@gizmodo.com",
  password: "SCtmerhkI"
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}
